(* Authors:
 * H.A. Coelho Dias (1531484)
 * R.E.L. van Dijk (0963283)
 *)

(* Definitions:
 * Spy = Compromised agent
 * B = Base Station
 * S = Server
 * D = Devices
 * kBD = Symmetric key between B and D
 * n = Nonce
 * c = Secure connection
 *)

(* Protocol:
 * D begin Connect(D, n, S)
 * D -> B: D, S, {S, n}_kBD         (maybe add pwd here)
 * B -> S: {|D, S, n|}_pk(S)
 * S -> B: {|D, n, c|}_pk(B)
 * B -> D: {S, n, c}_kBD
 * D -> S: n    (via c)
 * S end Connect(D, n, S)
 *)

free net.
free Spy, B, D, S.

private free kBD.

fun pk/1.                                         (* Get public key *)
private fun sk/1.                                 (* Get secret key *)
fun sencrypt/2.                                   (* Symmetric encryption *)
reduc sdecrypt(sencrypt(m, k), k) = m.            (* Symmetric decryption *)
fun encrypt/2.                                    (* Assymetric encryption *)
reduc decrypt(encrypt(m, pk(a)), sk(a)) = m.      (* Assymetric decryption *)

(* queries *)
query attacker:c.                                 (* Can external attacker get c? *)
query evinj:end(x,y,z) ==> evinj:start(x,y,z).    (* Verify authenticity via events *)

let device =
  new n;
  event start(D, n, S);
  out(net, (D, S, sencrypt((S, n), kBD)));        (* D -> B: D, S, {S, n}_kBD *)
  in(net, m);
  let (=n, D, c) = sdecrypt(m, kBD) in            (* B -> D: {S, n, c}_kBD *)
    out(c, n).                                    (* D -> S: n    (via c) *)

let server =
  in(net, m);
  let (D, S, n) = decrypt(m, sk(S)) in            (* B -> S: {|D, S, n|}_pk(S) *)
    new c;                                        (* New secure connection *)
    out(net, encrypt((D, n, c), pk(B)));          (* S -> B: {|D, n, c|}_pk(B) *)
    in(c, =n);
    event end(D, n, S).

let base =
  in(net, (D, S, nenc));
  let (=S, n) = sdecrypt(nenc, kBD) in            (* D -> B: D, S, {S, n}_kBD *)
    out(net, encrypt((D, S, n), pk(S)));          (* B -> S: {|D, S, n|}_pk(S) *)
    in(net, m);                                   (* S -> B: {|D, n, c|}_pk(B) *)
    let (=D, =n, c) = decrypt(m, sk(B)) in        (* B -> D: {S, n, c}_kBD *)
      out(net, sencrypt((S, n, c), kBD)).         (* D -> S: n    (via c) *)

let compromised =
  out(net, sk(Spy)).                              (* Give secret key Spy to the attacker *)

process
  !server | !device | !base | compromised
